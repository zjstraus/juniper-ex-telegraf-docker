# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
   dc = "$TELEGRAF_DC"
   rack = "$TELEGRAF_RACK"
   user = "$TELEGRAF_USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "$TELEGRAF_INTERVAL"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = $TELEGRAF_ROUND_INTERVAL

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "$TELEGRAF_COLLECTION_JITTER"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "$TELEGRAF_FLUSH_INTERVAL"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "$TELEGRAF_FLUSH_J_TTER"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = false
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  # urls = ["unix:///var/run/influxdb.sock"]
  # urls = ["udp://127.0.0.1:8089"]
   urls = ["$INFLUX_ADDRESS"]

  ## The target database for metrics; will be created as needed.
   database = "$INFLUX_DB"

  ## If true, no CREATE DATABASE queries will be sent.  Set to true when using
  ## Telegraf with a user without permissions to create databases or when the
  ## database already exists.
  # skip_database_creation = false

  ## Name of existing retention policy to write to.  Empty string writes to
  ## the default retention policy.  Only takes effect when using HTTP.
   retention_policy = "$INFLUX_RP"

  ## Write consistency (clusters only), can be: "any", "one", "quorum", "all".
  ## Only takes effect when using HTTP.
  # write_consistency = "any"

  ## Timeout for HTTP messages.
  # timeout = "5s"

  ## HTTP Basic Auth
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"

  ## HTTP User-Agent
  # user_agent = "telegraf"

  ## UDP payload size is the maximum packet size to send.
  # udp_payload = 512

  ## Optional TLS Config for use on HTTP connections.
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"

  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "identity"

  ## When true, Telegraf will output unsigned integers as unsigned values,
  ## i.e.: "42u".  You will need a version of InfluxDB supporting unsigned
  ## integer values.  Enabling this option will result in field type errors if
  ## existing data has been written.
  # influx_uint_support = false

 # Switch
 [[inputs.snmp]]
   agents = [ "$SNMP_TARGET" ]
   timeout = "5s"
   retries = 3
   version = 2
   community = "$SNMP_COMMUNITY"
   max_repetitions = 10

   name = "system"
   [[inputs.snmp.field]]
     name = "uptime"
     oid = ".1.3.6.1.2.1.1.3"

   [[inputs.snmp.table]]
     name = "interfaces"
     inherit_tags = [ "hostname" ]
     [[inputs.snmp.table.field]]
       name = "name"
       oid = ".1.3.6.1.2.1.31.1.1.1.1"
       is_tag = true
     [[inputs.snmp.table.field]]
       name = "inmulticastpackets"
       oid = ".1.3.6.1.2.1.31.1.1.1.2"
     [[inputs.snmp.table.field]]
       name = "inbroadcastpackets"
       oid = ".1.3.6.1.2.1.31.1.1.1.3"
     [[inputs.snmp.table.field]]
       name = "outmulticastpackets"
       oid = ".1.3.6.1.2.1.31.1.1.1.4"
     [[inputs.snmp.table.field]]
       name = "outbroadcastpackets"
       oid = ".1.3.6.1.2.1.31.1.1.1.5"
     [[inputs.snmp.table.field]]
       name = "speed"
       oid = ".1.3.6.1.2.1.31.1.1.1.15"
     [[inputs.snmp.table.field]]
       name = "adminstatus"
       oid = ".1.3.6.1.2.1.2.2.1.7"
     [[inputs.snmp.table.field]]
       name = "opstatus"
       oid = ".1.3.6.1.2.1.2.2.1.8"
     [[inputs.snmp.table.field]]
       name = "inoctets"
       oid = ".1.3.6.1.2.1.31.1.1.1.6"
     [[inputs.snmp.table.field]]
       name = "inunicastpackets"
       oid = ".1.3.6.1.2.1.2.2.1.11"
     [[inputs.snmp.table.field]]
       name = "indiscards"
       oid = ".1.3.6.1.2.1.2.2.1.13"
     [[inputs.snmp.table.field]]
       name = "inerrors"
       oid = ".1.3.6.1.2.1.2.2.1.14"
     [[inputs.snmp.table.field]]
       name = "outoctets"
       oid = ".1.3.6.1.2.1.2.2.1.16"
     [[inputs.snmp.table.field]]
       name = "outunicastpackets"
       oid = ".1.3.6.1.2.1.2.2.1.17"
     [[inputs.snmp.table.field]]
       name = "outdiscards"
       oid = ".1.3.6.1.2.1.2.2.1.19"
     [[inputs.snmp.table.field]]
       name = "outerrors"
       oid = ".1.3.6.1.2.1.2.2.1.20"
     [[inputs.snmp.table.field]]
       name = "outqueuedepth"
       oid = ".1.3.6.1.2.1.2.2.1.21"
